1.创建：		在某一目录（文件夹）下执行 git init 命令，当前文件夹即成为了一个 git 仓库
2.添加文件：
						git add <filename> 				―― 将文件的 修改信息 添加到暂存区
						git commit -m "修改内容" 	―― 将暂存区的 文件修改信息 提交到分支
3.查询：		
						git status 								―― 查看暂存区状态
						git diff <filename>				―― 查看指定文件差异			
						git log 									―― 查看版本日志
						git reflog 								―― 查询操作记录
4.版本回溯/撤销修改：（假设打开了一个文件，进行了修改，修改之后不满意，想撤销这次修改，对应不同的情况，按照下述操作进行――――当然，ctrl+z这种操作就不说了，这里指改动大且分散，不适宜手动改回去）
																																														 |----如果add进暂存区了，恢复到暂存区的版本
						git checkout -- <filename>――对文件修改后还没有add进暂存区，但是想撤销这次修改----|																					总而言之，恢复到最近一次add或者commit时的状态
																																														 |----如果没有add，恢复到分支的版本
																				
						git reset HEAD <filename> ――对文件修改后add进暂存区，但是想撤销这次修改（此时文件又回到了工作区，按照上一步即可撤销这次修改）
						
						git reset --hard 版本号 	――对文件修改后add进暂存区，而且commit到了分支/版本库
5.删除文件：(假设在资源管理器中删除了某文件，在git中有如下操作)
						git rm <filename>	+ git commit				――确认删除文件
						git checkout -- <filename>						――"一键还原"
6.GitHub：
						注册账号
						创建SSH Key（ssh-keygen -t rsa -C "email@address"），id_rsa为私钥，id_rsa.pub为公钥
						在GitHub添加公钥
						创建一个远程库<----------------------------------------(相同)
7.关联远程仓库：																									 |
						在本地仓库下运行：																		 v
						git remote add 远程库名 git@github.com:GitHub账户名/仓库名.git（远程库名和GitHub上的仓库名可以不一样，远程库名最好能体现出远程）
						git remote -v  				――查看可以push和fetch的远程库的地址
8.推送与抓取：
						git push [-u] 远程库名 分支名（-u通常在第一次推送时加入，和master分支一起，表示分支之间进行关联）
																				 （分支名为本地需要推送的分支）
						git pull							――抓取远程库最新文件，须首先建立关联
9.克隆：
						git clone git@github.com:GitHub账户名/仓库名.git
10.分支：
						通常情况下，一个项目需要有：
						master								――主分支，发布新版本
						dev										――开发分支，所有团队成员工作的基础，需不断同步、调整
						bug										――个人调试Bug用
						feature								――个人开发用，相当于dev的个人开发副本，写好后再提交到dev
						一个分支就是一个指针，指向最新的提交；HEAD也是一个指针，指向当前分支。
						git checkout -b dev		――创建并切换到一个新分支dev
						git checkout -b dev 远程库名/分支名
																	――创建dev分支并与远程dev关联
						git branch --set-upstream dev 远程库名/分支名
																	――建立已有本地分支dev与远程dev的关联			
						git branch						――查看所有分支，带有*的表示当前分支
						git merge dev    			――在master分支中运行，表示将dev合并到master（注意顺序）
						git merge --no-ff -m  ――不是直接移动指针指向B的最新版本进行合并，
																		而是新创建一个commit（相当于复制一个B的最新版本），
																		然后让A指向它，完成“合并”（以下图为例）
						git branch -d dev			――删除分支dev（合并后删除）
						git branch -D dev			――强行删除分支dev（已commit但未合并，比如某个功能开发出来后因为不需要不得不砍掉。）
11.分支冲突：
						1.假设分支A有一个文件a.txt，为了进一步开发，从分支A创建出了分支B
										---------o----------o-----------o(A)
																										\	
																										 \
																										  \
																										   \(B)		
						开发完成后，准备合并
										---------o----------o-----------o(A)
																										\	
																										 \
																										  \
																										   \-------o--------o------o---o(B)	
				    由于A分支没有变化，因此合并过程只需改变指针
				    				---------o----------o-----------o------------------------------(A)
																										\	 														 |
																										 \	   												 |
																										  \ 													 |
																										   \-------o--------o------o---o(B)	
						删除B
										---------o----------o-----------o------------------------------
																										 	 														 |
																										  	   												 |
																										    													 |
																										   														 o(A)	
						2.如果在开发过程中，A也变化了（比如别人也在开发，而且比你先提交）
										---------o----------o-----------o---------o------o-----o(A)
																										\	
																										 \
																										  \
																										   \-------o--------o------o---o(B)
						此时进行合并，git不能选择直接把指针改变，否则A已经发生的改变就要被丢弃，这时就需要解决冲突（conflict）
						解决方法也很简单：1.git pull（远程推送产生冲突时使用，先抓取远程最新的文件）
															2.确定最终文件需要保留那些部分（比如两个人开发不同部分，彼此商量一下怎么合并两个人的工作）
															3.在工作区打开文件，直接修改、保存即可		
															4.git add <filename>、git commit -m "修改信息"
															5.删除不要分支即可
12.临时保存：
						如果正在开发程序，需要突然处理一个Bug
						1.git stash			――保存当前工作场景，就像一个快照，等待稍后恢复
						2.切换到需要修改Bug的分支
						3.创建新分支进行调试
						4.合并分支
						5.git stash list ――查看当前所有已保存的工作现场
						6.git stash pop	 ――恢复并删除stash 	
13.标签：
						git tag v1.0		 ――为当前分支的最新提交commit打标签“v1.0”
						git tag					 ――查看所有标签	
						git tag [-a] v1.0 [-m 说明文字] commit号
														 ――为指定commit号对应的文件打标签，如添加注释文字，需使用-a		
						git show v1.0		 ――显示标签v1.0对应的信息
						
						git tag -d v1.0	 ――删除本地标签v1.0	
						git push 远程库名 <tagname>
														 ――推送本地标签到远程
						git push 远程库名 --tags
														 ――推送全部未推送过的本地标签到远程	
						git push 远程库名 :refs/tags/<tagname>
														 ――删除远程标签，但应该先删除本地标签
14.GitHub使用：
						对于他人的仓库
						1.点Fork克隆到自己账号下
						2.从自己账号下clone
15.码云：
						国服GitHub	
16.忽略特殊文件：
						1.使用.gitignore可以让git忽略某些垃圾文件
						2.文件.gitignore应当放到版本库里，并且可以对.gitignore做版本管理						
17.添加别名：
						在.git/config中的alias里面进行修改，还可以更改字体颜色等
18.搭建自己的git服务器：
						
					
					
					
					
									
				|-------普通工作区，存放文件
				|
工作区--|																		 |-------暂存区stage/index
				|																		 |
				|-------版本库，.git，存放版本信息---|-------HEAD指针
																						 |
																						 |-------分支
		
		         add				 commit
		修改文件----->暂存区-------->分支
				